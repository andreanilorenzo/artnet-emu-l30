<Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003" ToolsVersion="3.5">
  <PropertyGroup>
    <!-- The configuration and platform will be used to determine which
         assemblies to include from solution and project documentation
         sources -->
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{a395db0a-53c1-4376-91e1-670eab3a32fd}</ProjectGuid>
    <SHFBSchemaVersion>1.9.0.0</SHFBSchemaVersion>
    <!-- AssemblyName, Name, and RootNamespace are not used by SHFB but Visual
         Studio adds them anyway -->
    <AssemblyName>Documentation</AssemblyName>
    <RootNamespace>Documentation</RootNamespace>
    <Name>Documentation</Name>
    <!-- SHFB properties -->
    <OutputPath>.</OutputPath>
    <HtmlHelpName>Record</HtmlHelpName>
    <Language>en-US</Language>
    <DocumentationSources>
      <DocumentationSource sourceFile="Record.dll" />
      <DocumentationSource sourceFile="Record.xml" />
    </DocumentationSources>
    <WorkingPath>.\temp\</WorkingPath>
    <NamespaceSummaries>
      <NamespaceSummaryItem name="Vajhoej.Record" isDocumented="True">Library for reading and writing binary native structs.

&lt;h2&gt;Purpose&lt;/h2&gt;
&lt;p&gt;It is a library to read and write native structs from and to byte arrays by .NET programs in a way that is natural for .NET.&lt;/p&gt;
&lt;p&gt;It's main purpose is to be used by the NISAM library.&lt;/p&gt;
&lt;h2&gt;Java port&lt;/h2&gt;
&lt;p&gt;The library is a port of a similar Java library, so an occasional Java'ism may be found.&lt;/p&gt;
&lt;h2&gt;Getting started&lt;/h2&gt;
&lt;h3&gt;To use the library you need to:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;create POCO classes that contains all the fields in the native structs&lt;/li&gt;
&lt;li&gt;put annotations on the class and the fields that tell the library how the data are mapped to the native structs&lt;/li&gt;
&lt;li&gt;write the code that uses the library and the new POCO classes&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Note:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;the POCO classes should have a no args constructor&lt;/li&gt;
&lt;li&gt;the library does not care whether you use private fields and public properties or public fields (the first is .NET best practice)&lt;/li&gt;
&lt;li&gt;all fields except static fields must have attributes defining reading/writing&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Examples:&lt;/h3&gt;
&lt;h4&gt;POCO class&lt;/h4&gt;
&lt;pre&gt;
    [Struct]
    public class Data
    {
        [StructField(N=0,Type=FieldType.INT4)]
        private int iv;
        [StructField(N=1,Type=FieldType.FP8)]
        private double xv;
        [StructField(N=2,Type=FieldType.FIXSTR,Length=8,Encoding="ISO-8859-1")]
        private String sv;
        public int Iv
        {
            get { return iv; }
            set { iv = value; }
        }
        public double Xv
        {
            get { return xv; }
            set { xv = value; }
        }
        public string Sv
        {
            get { return sv; }
            set { sv = value; }
        }
    }
&lt;/pre&gt;
&lt;p&gt;The class got a [Struct] attribute. Each field in the class got a
[StructField] attribute with an element N that determines the order of the fields and an element type that describes the datatype in the native struct plus some optional elements that are needed for some field types.&lt;/p&gt;
&lt;h4&gt;Code fragments&lt;/h4&gt;
&lt;pre&gt;
// read
StructReader sr = new StructReader(somebytearray);
Data obj = sr.Read&amp;lt;Data&amp;gt;(typeof(Data));
// write
Data obj = new Data();
...
StructWriter sw = new StructWriter();
sw.Write(obj);
byte[] ba = sw.GetBytes();
&lt;/pre&gt;
&lt;h3&gt;Arrays&lt;/h3&gt;
&lt;p&gt;To specify a field as an array put an @Array annotation on the field and make the .NET type an array.&lt;/p&gt;
&lt;h3&gt;Sub structs&lt;/h3&gt;
&lt;p&gt;To specify a field as a sub struct just specify Type=FieldType.STRUCT in the [StructField] attribute.&lt;/p&gt;
&lt;h3&gt;Polymorphism&lt;/h3&gt;
&lt;p&gt;The Record library supports polymorphism in records.&lt;/p&gt;
&lt;p&gt;You must use the [Selector] attribute on the last field in the super class.&lt;/p&gt;
&lt;pre&gt;
    [Struct]
    public class SuperData
    {
        [StructField(N=0,Type=FieldType.INT4)]
        private int id;
        [StructField(N=1,Type=FieldType.INT4)]
        [Selector]
        [SubType(Value=1,Type=typeof(DataX))]
        [SubType(Value=2,Type=typeof(DataY))]
        private int typ;
        public int Id
        {
            get { return id; }
            set { id = value; }
        }
        public int Typ
        {
            get { return typ; }
            set { typ = value; }
        }
    }
&lt;/pre&gt;
&lt;p&gt;Usage is as simple as:&lt;/p&gt;
&lt;pre&gt;
Data obj = sr.Read&amp;lt;Data&amp;gt;(typeof(Data));
&lt;/pre&gt;
&lt;p&gt;This will actually read DataX or DataY instances depending on the value of the typ field.&lt;/p&gt;
&lt;p&gt;Note that the numbering of the struct fields continue in the sub class - it does not reset to zero.&lt;/p&gt;
&lt;h2&gt;System requirements&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;.NET 2.0 or newer&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;License&lt;/h2&gt;
&lt;p&gt;All the C# code is licensed under the &lt;a href="http://www.apache.org/licenses/LICENSE-2.0"&gt;Apache License, Version 2.0&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Author, bug reports etc.&lt;/h2&gt;
&lt;p&gt;This library is written by Arne Vajhoej (&lt;a href="mailto:arne@vajhoej.dk"&gt;arne@vajhoej.dk&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Bug reports, bug fixes and comments in general are welcome.&lt;/p&gt;
&lt;p&gt;Since this is a hobby project, then I can not give any guarantees about timeline for new releases.&lt;/p&gt;
&lt;h2&gt;Version history:&lt;/h2&gt;
&lt;dl&gt;
&lt;dt&gt;1.0&lt;/dt&gt;&lt;dd&gt;Initial release (February 2011).&lt;/dd&gt;
&lt;dt&gt;1.1&lt;/dt&gt;&lt;dd&gt;More advanced length providers and some new struct types (May 2013).&lt;/dd&gt;
&lt;dt&gt;1.1&lt;/dt&gt;&lt;dd&gt;Sync up with Java version (April 2017).&lt;/dd&gt;
&lt;/dl&gt;
</NamespaceSummaryItem>
<NamespaceSummaryItem name="(global)" isDocumented="False" /></NamespaceSummaries>
    <KeepLogFile>False</KeepLogFile>
    <HelpFileFormat>HtmlHelp1</HelpFileFormat>
    <VisibleItems>Attributes, ExplicitInterfaceImplementations, InheritedMembers, InheritedFrameworkMembers, Protected, SealedProtected</VisibleItems>
    <PresentationStyle>hana</PresentationStyle>
    <ProjectSummary>
    </ProjectSummary>
  </PropertyGroup>
  <!-- There are no properties for these groups.  AnyCPU needs to appear in
       order for Visual Studio to perform the build.  The others are optional
       common platform types that may appear. -->
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|x86' ">
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|x86' ">
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|x64' ">
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|x64' ">
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|Win32' ">
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|Win32' ">
  </PropertyGroup>
  <!-- Import the SHFB build targets -->
  <Import Project="$(SHFBROOT)\SandcastleHelpFileBuilder.targets" />
</Project>